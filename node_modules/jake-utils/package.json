{
  "name": "jake-utils",
  "description": "Functions for making jake a little nicer",
  "version": "0.0.19",
  "private": false,
  "keywords": [
    "jake",
    "utils",
    "build"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/howardabrams/jake-utils.git"
  },
  "dependencies": {
    "shelljs": "latest",
    "jshint": "latest",
    "uglify-js": ">= 2.2.5",
    "jake": ">= 0.5.8",
    "dateable": ">= 0.1.2",
    "ansi-color": ">=0.2.1",
    "log4js": "latest",
    "handlebars": ">=1.0.5beta",
    "marked": ">= 0.2.8"
  },
  "author": {
    "name": "Howard Abrams",
    "url": "http://www.github.com/howardabrams"
  },
  "readme": "The `jake-utils` is a collection of useful functions for using [Jake][3].\n\n**Note:** As a package, it does un-orthodox things like creating\nglobal functions and attempting to make everything run synchronously.\nThis design decision was made in order to be consistent with Jake, and\nbehave similarly to a \"build system\".\n\n  [3]: https://github.com/isaacs/node-jake\n  \nUsage\n-----\n\nIn your `Jakefile`, simply add the following code near the top:\n\n    require('jake-utils');\n\nYou will then have a number of functions you an use.\n\n\nMocha Tests\n-----------\n\nMy favorite test harness is [Mocha][1]. \n\nYou can now do something like:\n\n    mochaTests({\n        directory: \"test\",\n        files    : /test\\-.*\\.js/,\n        coverage : true,\n        reporter : 'tap',\n        output   : 'test/results.tap'\n    });\n\nThis restores the `console.log()` before running any of the tests.\n\n**Note:** Using Mocha with [log4js][2] means that your TAP results get wonky\nwhen all `console.log()` calls get interspersed with the TAP code.\n\n [1]: https://github.com/visionmedia/mocha\n [2]: http://log4js.berlios.de/\n \n \nDisplay Messages\n----------------\n\nYou can have obnoxious headers around your tasks, to make it stand out\nmore when you are looking at builds on Jenkins.\n\n    task('api', function() {\n        start(\"Generating the Internal Documentation\");\n    \n        // ...\n        \n        end(\"View documents in '%s'\", apidest);\n    });\n\n\nLint Analysis using JSHint\n--------------------------\n\nWe have a nice wrapper around the [JSHint][4] utility for analyzing all\nthe files found in the directories specified. For example:\n\n    desc(\"Lints all of the script files in the source directories\");\n    task('lint', function(){\n        start(\"Analyzing the Script Files\");\n    \n        var codelib    = [ 'services' , 'routes', 'resources' ];\n        lint( codelib );\n    \n        end();\n    });\n    \n  [4]: https://github.com/jshint/node-jshint/\n\n\nConcatenate files\n--------------------------\n\nThe method `concat` is available to concatenate multiple files into one.\nThe method resolves patterns in filenames, and has options to add a header,\nseparators, and a footer to the concatenated file. Example:\n\n    desc(\"Concatenates all source files into library\");\n    task('concat', function(){\n        start(\"Concatenating the source files\");\n\n        var result = concat({\n            src: [\n                './src/main.js',\n                './src/extra.js',\n                './src/functions/**',\n            ],\n            dest: './lib/mylibrary.js',           // optional\n            header: '// license information...',  // optional\n            separator: '\\n',                      // optional\n            footer: '// the end...'               // optional\n        });\n\n        // returned result is an object containing:\n        //     {String} code   The concatenated data\n        //     {String} src    The list with resolved filenames\n\n        end();\n    });\n\nMarkdown File Conversion\n------------------------\n\nThe `markdown` function converts a markdown-formatted file into an HTML file using the\n[marked parser](https://github.com/chjj/marked).\n\n    desc(\"Converts README into HTML File);\n    task('readme', function(){\n        start(\"Converting the README into a web page\");\n        markdown( \"README.md\", \"pub/README.html\");\n        end();\n    });\n\nThe function takes an optional third parameter for `marked`-specific options.\n\n\nMinify using uglify-js\n--------------------------\n\nThe method `minify` is available to minify a source file using [uglify-js][5].\nThe method accepts one source file, or an array with multiple source files, and\nresolves patterns in the filenames. Example:\n\n    desc(\"Minify the library\");\n    task('minify', function(){\n        start(\"Minifying library\");\n\n        var result = minify({\n            src:  './lib/mylibrary.js',\n            dest: './lib/mylibrary.min.js',       // optional\n            options: {},                          // uglify-js options. optional\n            header: '// license information...',  // optional\n            separator: '\\n',                      // optional\n            footer: '// the end...'               // optional\n        });\n\n        // returned result is an object containing:\n        //     {String} code   The concatenated data\n        //     {String} src    The list with resolved filenames\n\n        end();\n    });\n\n  [5]: https://github.com/mishoo/UglifyJS2\n\n\nReplace patterns in files\n--------------------------\n\nThe method `replace` can be used to replace patterns in files, for example to\nfill in today's date or the version number of the package. The patterns can\nbe a string or a regular expression. The list with source files can contain\npatterns. Example:\n\n    desc(\"Replace version and date in source files\");\n    task('replace', function(){\n        start(\"Replace version and date in source files\");\n\n        var result = replace({\n            replacements: [\n                {pattern: '@@date',    replacement: today()},\n                {pattern: '@@version', replacement: version()}\n            },\n            src: [\n             'main.js',\n             'other/*.js'\n            ]\n        });\n\n        // returned result is an object containing:\n        //     {String} src    The list with resolved filenames\n\n        end();\n    });\n\n  [5]: https://github.com/mishoo/UglifyJS2\n\n\nUtility functions\n--------------------------\n\nOther utility methods are:\n\n    var p = pkg();              // package.json contents\n    var v = version();          // version number from package.json\n    var d = today();            // formatted date of today\n    var data = read(filename);  // read data (fs.readFileSync)\n    write(filename, data);      // write data (fs.writeFileSync)\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/howardabrams/jake-utils/issues"
  },
  "homepage": "https://github.com/howardabrams/jake-utils",
  "_id": "jake-utils@0.0.19",
  "_from": "jake-utils@>= 0.0.13"
}
